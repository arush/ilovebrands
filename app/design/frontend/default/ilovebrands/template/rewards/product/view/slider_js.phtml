<script type="text/javascript">
    document.observe("dom:loaded", function() {
        usesContainer = $('redemption_rule_uses_container');
    });
			
    /**
     * 
     * @param rule_id
     * @return
     */
    function feignPriceChange(rule_id) {
        var newPrice = $(new_price_dom_id);
        var oldPrice = $(old_price_dom_id);
        var numUses = getRedemptionUses();
        numUses = (numUses == "") ? 1 : parseInt(numUses);
        if(rule_id == null) {
            rule_id = $('redemption_rule').value;
        }
    
        if(!show_lowest_price) { return; }
    	
        if(oldPrice == null) {
            oldPrice = newPrice.cloneNode(true);
            newPrice.up().insertBefore(oldPrice, newPrice);
            oldPrice.id = old_price_dom_id;
            oldPrice.removeClassName('price');
            oldPrice.addClassName('old-price');
            do_hide_old_price = true;
        }
        
        var finalPrice = getProductPriceBeforeRedemptions();
         
        if(rule_id == "") {
            if(do_hide_old_price) oldPrice.hide();
            optionsPrice.productPrice = optionsPrice.productPriceBeforeRedemptions;
            optionsPrice.reload();
        } else {
            if(do_hide_old_price) oldPrice.show();
            var price_disposition = rule_options[rule_id]['price_disposition'];
            //Edited 2/24/2010 7:41:46 AM : prices that set "to_fixed" discount should also 
            if(rule_options[rule_id]['discount_action'] == 'by_fixed' && rule_options[rule_id]['new_price_flt'] <= 0.0000) {
                optionsPrice.productPrice = 0;
                optionsPrice.minusDisposition = 9999999999; // hack to make sure the price stays at 0;
            } else {
                
                var discount = price_disposition * numUses;                
                optionsPrice.productPrice = finalPrice - discount;
                
                // Magento 1.4.2 keeps optionsPrice.productPrice at the base price
                // this fix brings the price back to the base amount
                if(optionsPrice.optionPrices.config != undefined) {
                    if(optionsPrice.optionPrices.config.price != undefined) {
                        optionsPrice.productPrice = optionsPrice.productPriceBeforeRedemptions - discount;
                    } else {
                        optionsPrice.productPrice = optionsPrice.productPriceBeforeRedemptions - discount;
                    }
                }
                
            }
                        
            points_amount = rule_options[rule_id]['amount'];
            points_currency_id = rule_options[rule_id]['currency_id'];
            points_caption = getPointsString(points_amount*numUses, points_currency_id);
    		
            optionsPrice.reload();
    	    
            var points_with = " " + CAPTION_WITH + " " + points_caption ;
       	    if(newPrice.down() != null) {
                newPrice.down().innerHTML =  newPrice.down().innerHTML  + points_with ;
       	    } else if(newPrice.down() == null && newPrice != null) {
                newPrice.innerHTML =  newPrice.innerHTML  + points_with;
       	    } else { /*don't know where it is so just don't show the points thing.*/ }
        }
    }
    
    function getRedemptionUses() {
        var uses;
        if(slider_mode) {
            uses = rSlider.getUses();
        } else {
            uses = $('redemption_rule_uses').value;
        }
        return uses;
    }
</script>