<?php
/**
 * WDCA - Sweet Tooth Instore
 * 
 * NOTICE OF LICENSE
 * 
 * This source file is subject to the SWEET TOOTH (TM) INSTORE
 * License, which extends the Open Software License (OSL 3.0).
 * The Sweet Tooth Instore License is available at this URL: 
 * http://www.sweettoothrewards.com/instore/sweet_tooth_instore_license.txt
 * The Open Software License is available at this URL: 
 * http://opensource.org/licenses/osl-3.0.php
 * 
 * DISCLAIMER
 * 
 * By adding to, editing, or in any way modifying this code, WDCA is 
 * not held liable for any inconsistencies or abnormalities in the 
 * behaviour of this code. 
 * By adding to, editing, or in any way modifying this code, the Licensee
 * terminates any agreement of support offered by WDCA, outlined in the 
 * provided Sweet Tooth Instore License. 
 * Upon discovery of modified code in the process of support, the Licensee 
 * is still held accountable for any and all billable time WDCA spent 
 * during the support process.
 * WDCA does not guarantee compatibility with any other framework extension. 
 * WDCA is not responsbile for any inconsistencies or abnormalities in the
 * behaviour of this code if caused by other framework extension.
 * If you did not receive a copy of the license, please send an email to 
 * support@wdca.ca or call 1-888-699-WDCA(9322), so we can send you a copy 
 * immediately.
 * 
 * @category   [TBT]
 * @package    [TBT_Rewardsinstore]
 * @copyright  Copyright (c) 2011 Sweet Tooth (http://www.sweettoothrewards.com)
 * @license    http://www.sweettoothrewards.com/instore/sweet_tooth_instore_license.txt
 */
?>
<script type="text/javascript">
//<![CDATA[
var addressModel = Class.create();

addressModel.prototype = {

	initialize : function() {
    	this.regionsUrl = '<?php echo $this->getRegionsUrl() ?>';
    	this.loader = new varienLoader(true);
        this.bindCountryRegionRelation();
    },

    bindCountryRegionRelation : function(){
        
        countryElements = $$('#country_id');

        for(var i=0;i<=countryElements.length;i++){
            if(countryElements[i]){
                if(!countryElements[i].bindRegions || !countryElements[i].parentBindId || countryElements[i].parentBindId!=parentId){
                    
                    Event.observe(countryElements[i], 'change', this.reloadRegionField.bind(this));
                    countryElements[i].bindRegions = true;
                    countryElements[i].parentBindId = null;
                }
            }
        }
    },

    reloadRegionField : function(event){
        
        var countryElement = Event.element(event);
        if(countryElement.id){
            // var regionElement  = $(countryElement.id.replace(/country_id/, 'region'));
            var regionElement  = $('region');
            if(regionElement){
                this.regionElement = regionElement;
                if (countryElement.value) {
                    var url = this.regionsUrl + 'parent/' + countryElement.value;
                    this.loader.load(url, {}, this.refreshRegionField.bind(this));
                } else {
                    // Set empty text field in region
                    this.refreshRegionField('[]');
                }
            }
            // set Zip optional/required
            // varienGlobalEvents.fireEvent("address_country_changed", countryElement);
        }
    },

    // serverResponse is either string with server response, or object to force some paricular data setting
    refreshRegionField : function(serverResponse){
        // alert('refreshRegionField');
        if (!serverResponse)
            return;
        var data = eval('(' + serverResponse + ')');
        var row = Element.previous(this.regionElement.parentNode,0);
        var reqLabel = Element.select(row, '.required');

        // Set regions and refresh controls
        // We use a pair of 'region' and 'region_id' to properly submit data:
        // manually entered text goes in 'region' and selected option id goes in 'region_id'
        var regionHtmlName = this.regionElement.name;
        var regionIdHtmlName = regionHtmlName.replace(/region/, 'region_id');
        var regionHtmlId = this.regionElement.id;
        var regionIdHtmlId = regionHtmlId.replace(/region/, 'region_id');
        var newInputId = null; // id of imput that was added to a page - filled below

        if (data.length) {
            // Create visible selectbox 'region_id' and hidden 'region'
            var html = '<select name="' + regionIdHtmlName + '" id="' + regionIdHtmlId + '" class="required-entry select" title="' + this.regionElement.title + '">';
            html+= '<option value=""></option>';
            for (var i in data){
                if(data[i].label) {
                    html+= '<option value="'+data[i].value+'"';
                    if(this.regionElement.value && (this.regionElement.value == data[i].value || this.regionElement.value == data[i].label)){
                        html+= ' selected="selected"';
                    }
                    html+='>'+data[i].label+'</option>';
                }
            }
            html += '</select>';

            html += '<input type="hidden" name="' + regionHtmlName + '" id="' + regionHtmlId + '"/>';

            if (reqLabel) {
                reqLabel.each(function(item){Element.show(item)});
            }

            newInputId = regionIdHtmlId;
        } else {
            // Create visible text input 'region' and hidden 'region_id'
            var html = '<input type="text" name="' + regionHtmlName + '" id="' + regionHtmlId + '" class="input-text" title="' + this.regionElement.title + '" />';
            html += '<input type="hidden" name="' + regionIdHtmlName + '" id="' + regionIdHtmlId + '"/>';

            if (reqLabel) {
                reqLabel.each(function(item){Element.hide(item)});
            }

            newInputId = regionHtmlId;
        }

        var parentNode = this.regionElement.parentNode;
        parentNode.innerHTML = html;
        this.regionElement = $(regionHtmlId);

        // Updating in address info
        //var newInput = $(newInputId);
        //Event.observe(newInput, 'change', this.onItemFormFieldChange); // Restore observing to update address info
        //this.syncFormData(newInput); // Update address info now
    }
}

Event.observe(window, 'load', function() {
    var customerAddresses = new addressModel();
});
    

//]]>
</script>
