### Eclipse Workspace Patch 1.0
#P SLandsbek_SimpleOrderExport
Index: src/app/code/community/SLandsbek/SimpleOrderExport/Model/Export/Csv.php
===================================================================
--- src/app/code/community/SLandsbek/SimpleOrderExport/Model/Export/Csv.php	(revision 9)
+++ src/app/code/community/SLandsbek/SimpleOrderExport/Model/Export/Csv.php	(working copy)
@@ -84,10 +84,11 @@
         $common = $this->getCommonOrderValues($order);
 
         $orderItems = $order->getItemsCollection();
+        $itemInc = 0;
         foreach ($orderItems as $item)
         {
             if (!$item->isDummy()) {
-                $record = array_merge($common, $this->getOrderItemValues($item, $order));
+                $record = array_merge($common, $this->getOrderItemValues($item, $order, ++$itemInc));
                 fputcsv($fp, $record, self::DELIMITER, self::ENCLOSURE);
             }
         }
@@ -115,25 +116,39 @@
             'Order Paid',
             'Order Refunded',
             'Order Due',
+            'Total Qty Items Ordered',
+            'Customer Name',
+            'Customer Email',
             'Shipping Name',
             'Shipping Company',
             'Shipping Street',
             'Shipping Zip',
             'Shipping City',
+        	'Shipping State',
+            'Shipping State Name',
             'Shipping Country',
+            'Shipping Country Name',
     		'Billing Name',
             'Billing Company',
             'Billing Street',
             'Billing Zip',
             'Billing City',
+        	'Billing State',
+            'Billing State Name',
             'Billing Country',
+            'Billing Country Name',
+            'Order Item Increment',
     		'Item Name',
             'Item Status',
             'Item SKU',
             'Item Options',
             'Item Original Price',
     		'Item Price',
-            'Item Ordered Qty',
+            'Item Qty Ordered',
+        	'Item Qty Invoiced',
+        	'Item Qty Shipped',
+        	'Item Qty Canceled',
+            'Item Qty Refunded',
             'Item Tax',
             'Item Discount',
     		'Item Total'
@@ -150,9 +165,9 @@
 	 */
     protected function getCommonOrderValues($order) 
     {
-        $shippingAddress = $order->getShippingAddress();
+        $shippingAddress = !$order->getIsVirtual() ? $order->getShippingAddress() : null;
         $billingAddress = $order->getBillingAddress();
-
+        
         return array(
             $order->getRealOrderId(),
             Mage::helper('core')->formatDate($order->getCreatedAt(), 'medium', true),
@@ -168,18 +183,27 @@
             $this->formatPrice($order->getData('total_paid'), $order),
             $this->formatPrice($order->getData('total_refunded'), $order),
             $this->formatPrice($order->getData('total_due'), $order),
-            $shippingAddress->getName(),
-            $shippingAddress->getData("company"),
-            $shippingAddress->getData("street"),
-            $shippingAddress->getData("postcode"),
-            $shippingAddress->getData("city"),
-            $shippingAddress->getCountry(),
+            $this->getTotalQtyItemsOrdered($order),
+            $order->getCustomerName(),
+            $order->getCustomerEmail(),
+            $shippingAddress ? $shippingAddress->getName() : '',
+            $shippingAddress ? $shippingAddress->getData("company") : '',
+            $shippingAddress ? $shippingAddress->getData("street") : '',
+            $shippingAddress ? $shippingAddress->getData("postcode") : '',
+            $shippingAddress ? $shippingAddress->getData("city") : '',
+            $shippingAddress ? $shippingAddress->getRegionCode() : '',
+            $shippingAddress ? $shippingAddress->getRegion() : '',
+            $shippingAddress ? $shippingAddress->getCountry() : '',
+            $shippingAddress ? $shippingAddress->getCountryModel()->getName() : '',
             $billingAddress->getName(),
             $billingAddress->getData("company"),
             $billingAddress->getData("street"),
             $billingAddress->getData("postcode"),
             $billingAddress->getData("city"),
-            $billingAddress->getCountry()
+            $billingAddress->getRegionCode(),
+            $billingAddress->getRegion(),
+            $billingAddress->getCountry(),
+            $billingAddress->getCountryModel()->getName()
         );
     }
 
@@ -190,15 +214,10 @@
 	 * @param Mage_Sales_Model_Order $order The order the item belongs to
 	 * @return Array The array containing the item specific values
 	 */
-    protected function getOrderItemValues($item, $order) 
+    protected function getOrderItemValues($item, $order, $itemInc=1) 
     {  
         return array(
+            $itemInc,
             $item->getName(),
             $item->getStatus(),
             $this->getItemSku($item),
@@ -206,6 +225,10 @@
             $this->formatPrice($item->getOriginalPrice(), $order),
             $this->formatPrice($item->getData('price'), $order),
             (int)$item->getQtyOrdered(),
+            (int)$item->getQtyInvoiced(),
+            (int)$item->getQtyShipped(),
+            (int)$item->getQtyCanceled(),
+        	(int)$item->getQtyRefunded(),
             $this->formatPrice($item->getTaxAmount(), $order),
             $this->formatPrice($item->getDiscountAmount(), $order),
             $this->formatPrice($this->getItemTotal($item), $order)
Index: src/app/code/community/SLandsbek/SimpleOrderExport/Model/Export/Abstract.php
===================================================================
--- src/app/code/community/SLandsbek/SimpleOrderExport/Model/Export/Abstract.php	(revision 8)
+++ src/app/code/community/SLandsbek/SimpleOrderExport/Model/Export/Abstract.php	(working copy)
@@ -90,6 +90,24 @@
         }
         return '';
     }
+    
+    /**
+     * Returns the total quantity of ordered items of the given order.
+     *
+     * @param Mage_Sales_Model_Order $order The order to return info from
+     * @return int The total quantity of ordered items
+     */
+    protected function getTotalQtyItemsOrdered($order) {
+        $qty = 0;
+        $orderedItems = $order->getItemsCollection();
+        foreach ($orderedItems as $item)
+        {
+            if (!$item->isDummy()) {
+                $qty += (int)$item->getQtyOrdered();
+            }
+        }
+        return $qty;
+    }
 
     /**
      * Returns the sku of the given item dependant on the product type.
